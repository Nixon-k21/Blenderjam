import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import pytz

from db import users_table, contests_table, parts_table, subs_table, User, Contest, Part
from config import ADMIN_IDS

class ParticipationStates(StatesGroup):
    Confirm  = State()
    R1       = State()
    R2       = State()
    R3       = State()
    Desc     = State()
    File     = State()

class SettingsStates(StatesGroup):
    Timezone = State()

def get_or_create_user(user_id):
    rec = users_table.get(User.user_id==user_id)
    if not rec:
        users_table.insert({
            "user_id":user_id,
            "jam_coins":0,
            "notify":False,
            "timezone":"UTC"
        })
        rec = users_table.get(User.user_id==user_id)
    return rec

async def cmd_start(message: types.Message):
    get_or_create_user(message.from_user.id)
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
      InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å",  callback_data="profile"),
      InlineKeyboardButton("Jam—ã",      callback_data="jams"),
      InlineKeyboardButton("–ü—Ä–æ—Ö–æ–¥—è—â–∏–µ/–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="ojj"),
      InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 3D Jam Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=kb)

async def callback_main(call: types.CallbackQuery, state: FSMContext):
    user = get_or_create_user(call.from_user.id)
    data = call.data

    if data=="profile":
        parts = parts_table.search(Part.user_id==call.from_user.id)
        total = len(parts)
        rates = [p["rating"] for p in subs_table.all()
                 if p.get("rating",0)>0 and p["user_id"]==call.from_user.id]
        avg = sum(rates)/len(rates) if rates else 0
        names = []
        for p in parts:
            c = contests_table.get(doc_id=p["contest_id"])
            if c: names.append(c["name"])
        txt = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–£—á–∞—Å—Ç–∏–π: {total}\n"
            f"Jam Coins: {user['jam_coins']}\n"
            f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg:.2f}\n"
            f"–°–ø–∏—Å–æ–∫ Jam‚Äô–æ–≤: {', '.join(names) if names else '‚Äî'}\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö: {'‚úÖ' if user['notify'] else '‚ùå'}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user['timezone']}"
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚åöÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set_tz"))
        kb.add(InlineKeyboardButton("üîî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notify"))
        await call.message.answer(txt, reply_markup=kb)

    elif data=="toggle_notify":
        users_table.update({"notify": not user["notify"]},
                           User.user_id==call.from_user.id)
        await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", show_alert=True)
        await call.message.delete()

    elif data=="set_tz":
        await SettingsStates.Timezone.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø—Ä–∏–º–µ—Ä: Europe/Moscow):")

    elif data=="jams" or data=="ojj":
        now = datetime.utcnow()
        ongoing = []
        upcoming = []
        for c in contests_table.all():
            start = datetime.fromisoformat(c["start"])
            end   = datetime.fromisoformat(c["end"])
            if start<= now <= end:
                ongoing.append(c)
            elif start> now:
                upcoming.append(c)
        txt = "üèÅ –ü—Ä–æ—Ö–æ–¥—è—â–∏–µ Jam‚Äô—ã:\n"
        for c in ongoing:
            txt += f"{c['id']}. {c['name']} ({c['start']}‚Äî{c['end']})\n"
        txt += "\nüóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Jam‚Äô—ã:\n"
        for c in upcoming:
            txt += f"{c['id']}. {c['name']} ({c['start']}‚Äî{c['end']})\n"

        kb = InlineKeyboardMarkup(row_width=1)
        for c in ongoing+upcoming:
            part = parts_table.get((Part.user_id==call.from_user.id)&
                                   (Part.contest_id==c.doc_id))
            text = f"{'‚úÖ' if part and part['confirmed'] else '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'}: {c['name']}"
            kd   = f"participate:{c.doc_id}"
            kb.add(InlineKeyboardButton(text, callback_data=kd))
        await call.message.answer(txt, reply_markup=kb)

    elif data.startswith("participate:"):
        cid = int(data.split(":")[1])
        part = parts_table.get((Part.user_id==call.from_user.id)&
                               (Part.contest_id==cid))
        if not part:
            parts_table.insert({
                "user_id": call.from_user.id,
                "contest_id": cid,
                "confirmed": False,
                "rating": 0
            })
        await call.answer("–í–≤–µ–¥–∏—Ç–µ ¬´–¥–∞¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ.",
                          show_alert=True)
        await ParticipationStates.Confirm.set()
        await state.update_data(contest_id=cid)

    await call.answer()

async def participation_confirm(message: types.Message, state: FSMContext):
    if message.text.strip().lower()!="–¥–∞":
        await message.answer("–û—Ç–º–µ–Ω–∞.")
        await state.finish()
        return
    data = await state.get_data()
    cid = data["contest_id"]
    parts_table.update({"confirmed":True},
        (Part.user_id==message.from_user.id)&(Part.contest_id==cid))
    await message.answer("‚úÖ –í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n"
                         "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /submit")
    await state.finish()

async def cmd_submit(message: types.Message):
    try:
        cid = int(message.text.split()[1])
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /submit <id –∫–æ–Ω–∫—É—Ä—Å–∞>")
        return
    part = parts_table.get((Part.user_id==message.from_user.id)&
                           (Part.contest_id==cid)&(Part.confirmed==True))
    if not part:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º Jam‚Äô–µ.")
        return
    c = contests_table.get(doc_id=cid)
    now = datetime.utcnow()
    if now > datetime.fromisoformat(c["end"]):
        await message.answer("‚è∞ –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω ‚Äì –≤—ã –≤—ã–±—ã–ª–∏.")
        return
    await ParticipationStates.R1.set()
    await state.update_data(contest_id=cid, renders=[])
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä (—Ñ–æ—Ç–æ).")

async def process_render1(photo: types.PhotoSize, state: FSMContext,
                          message: types.Message):
    data = await state.get_data()
    renders = data["renders"] + [photo[-1].file_id]
    await state.update_data(renders=renders)
    await ParticipationStates.next()
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Ä–µ–Ω–¥–µ—Ä.")

async def process_render2(photo: types.PhotoSize, state: FSMContext,
                          message: types.Message):
    data = await state.get_data()
    renders = data["renders"] + [photo[-1].file_id]
    await state.update_data(renders=renders)
    await ParticipationStates.next()
                              await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π —Ä–µ–Ω–¥–µ—Ä.")

async def process_render3(photo: types.PhotoSize, state: FSMContext,
                          message: types.Message):
    data = await state.get_data()
    renders = data["renders"] + [photo[-1].file_id]
    await state.update_data(renders=renders)
    await ParticipationStates.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã (—Ç–µ–∫—Å—Ç).")

async def process_desc(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await ParticipationStates.next()
    await message.answer("–ò, –Ω–∞–∫–æ–Ω–µ—Ü, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª‚Äë–∏—Å—Ö–æ–¥–Ω–∏–∫.")

async def process_file(doc: types.Document, state: FSMContext,
                       message: types.Message):
    data = await state.get_data()
    cid = data["contest_id"]
    subs_table.insert({
        "user_id": message.from_user.id,
        "contest_id": cid,
        "renders": data["renders"],
        "description": data["description"],
        "file_id": doc.file_id,
        "timestamp": datetime.utcnow().isoformat(),
        "rating": 0
    })
    await message.answer("üéâ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    for adm in ADMIN_IDS:
        try:
            await message.bot.send_message(adm,
                f"–ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}\n"
                f"–ö–æ–Ω–∫—É—Ä—Å: {cid}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
            )
        except:
            pass
    await state.finish()

async def set_timezone(message: types.Message, state: FSMContext):
    tz = message.text.strip()
    if tz not in pytz.all_timezones:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    users_table.update({"timezone":tz},
                       User.user_id==message.from_user.id)
    await message.answer(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}")
    await state.finish()

def register_handlers(dp):
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_callback_query_handler(callback_main, lambda c: True, state="*")

    dp.register_message_handler(participation_confirm,
                                state=ParticipationStates.Confirm)
    dp.register_message_handler(cmd_submit, commands=["submit"])
    dp.register_message_handler(process_render1, state=ParticipationStates.R1,
                                content_types=types.ContentType.PHOTO)
    dp.register_message_handler(process_render2, state=ParticipationStates.R2,
                                content_types=types.ContentType.PHOTO)
    dp.register_message_handler(process_render3, state=ParticipationStates.R3,
                                content_types=types.ContentType.PHOTO)
    dp.register_message_handler(process_desc, state=ParticipationStates.Desc,
                                content_types=types.ContentType.TEXT)
    dp.register_message_handler(process_file, state=ParticipationStates.File,
                                content_types=types.ContentType.DOCUMENT)
    dp.register_message_handler(set_timezone,
                                state=SettingsStates.Timezone)
