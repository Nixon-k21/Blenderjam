import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsmstorage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import pytz

from db import userstable, conteststable, partstable, substable, User, Contest, Part
from config import ADMINIDS

# 1) –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ParticipationStates(StatesGroup):
    Confirm  = State()
    R1       = State()
    R2       = State()
    R3       = State()
    Desc     = State()
    File     = State()

class SettingsStates(StatesGroup):
    Timezone = State()

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–ò
def getorcreateuser(userid):
    rec = userstable.get(User.userid==userid)
    if not rec:
        userstable.insert({
            "userid":userid,
            "jamcoins":0,
            "notify":False,
            "timezone":"UTC"
        })
        rec = userstable.get(User.userid==userid)
    return rec

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ö–û–ú–ê–ù–î–ê /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def cmdstart(message: types.Message):
    getorcreateuser(message.fromuser.id)
    kb = InlineKeyboardMarkup(rowwidth=2)
    kb.add(
      InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å",  callbackdata="profile"),
      InlineKeyboardButton("Jam—ã",      callbackdata="jams"),
      InlineKeyboardButton("–ü—Ä–æ—Ö–æ–¥—è—â–∏–µ/–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callbackdata="ojj"),
      InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callbackdata="settings")
    )
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 3D Jam Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", replymarkup=kb)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def callbackmain(call: types.CallbackQuery, state: FSMContext):
    user = getorcreateuser(call.fromuser.id)
    data = call.data
    if data=="profile":
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        parts = partstable.search(Part.userid==call.fromuser.id)
        total = len(parts)
        # —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–±–µ—Ä–µ–º —É —Ç–µ—Ö, —É –∫–æ–≥–æ rating>0)
rates = p["rating" for p in substable.all() if p.get("rating",0)>0 and p["userid"]==call.fromuser.id]
        avg = sum(rates)/len(rates) if rates else 0
        # —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π
        names = []
        for p in parts:
            c = conteststable.get(docid=p["contestid"])
            if c: names.append(c"name")
        txt = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–£—á–∞—Å—Ç–∏–π: {total}\n"
            f"Jam Coins: {user'jam_coins'}\n"
            f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg:.2f}\n"
            f"–°–ø–∏—Å–æ–∫ Jam‚Äô–æ–≤: {', '.join(names) if names else '‚Äî'}\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö: {'‚úÖ' if user'notify' else '‚ùå'}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user'timezone'}"
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚åöÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callbackdata="settz"))
        kb.add(InlineKeyboardButton("üîî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callbackdata="togglenotify"))
        await call.message.answer(txt, replymarkup=kb)

    elif data=="togglenotify":
        userstable.update({"notify": not user["notify"]}, User.userid==call.fromuser.id)
        await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", showalert=True)
        await call.message.delete()

    elif data=="settz":
        await SettingsStates.Timezone.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø—Ä–∏–º–µ—Ä: Europe/Moscow):")

    elif data=="settings":
        # —Ç–æ—Ç –∂–µ –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ —Å—é–¥–∞ –≤—ã–Ω–µ—Å—Ç–∏
        await call.answer("–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", showalert=True)

    elif data=="jams" or data=="ojj":
        now = datetime.utcnow()
        ongoing = 
        upcoming = 
        for c in conteststable.all():
            start = datetime.fromisoformat(c["start"])
            end   = datetime.fromisoformat(c["end"])
            if start<= now <= end:
                ongoing.append(c)
            elif start> now:
                upcoming.append(c)
        txt = "üèÅ –ü—Ä–æ—Ö–æ–¥—è—â–∏–µ Jam‚Äô—ã:\n"
        for c in ongoing:
            txt += f"{c['id']}. {c['name']} ({c['start']}‚Äî{c['end']})\n"
        txt += "\nüóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Jam‚Äô—ã:\n"
        for c in upcoming:
            txt += f"{c['id']}. {c['name']} ({c['start']}‚Äî{c['end']})\n"

        kb = InlineKeyboardMarkup(rowwidth=1)
        for c in ongoing+upcoming:
            # –ø—Ä–æ–≤–µ—Ä–∏–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —é–∑–µ—Ä
            part = partstable.get((Part.userid==call.fromuser.id)&(Part.contestid==c.docid))
            text = f"{'‚úÖ' if part and part['confirmed'] else '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'}: {c['name']}"
            kd   = f"participate:{c.docid}"
            kb.add(InlineKeyboardButton(text, callbackdata=kd))
        await call.message.answer(txt, replymarkup=kb)

    elif data.startswith("participate:"):
        cid = int(data.split(":")1)
        # —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å —É—á–∞—Å—Ç–∏—è –µ—Å–ª–∏ –Ω–µ—Ç
        part = partstable.get((Part.userid==call.fromuser.id)&(Part.contestid==cid))
        if not part:
            partstable.insert({
                "userid": call.fromuser.id,
                "contestid": cid,
                "confirmed": False,
                "rating": 0
            })
        await call.answer("–í–≤–µ–¥–∏—Ç–µ ¬´–¥–∞¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ.", showalert=True)
        await ParticipationStates.Confirm.set()
        # —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ FSM —Ç–µ–∫—É—â–µ–µ contestid
        state = call.state.proxy()
        await state.updatedata(contestid=cid)

    await call.answer()

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è
async def participationconfirm(message: types.Message, state: FSMContext):
    if message.text.strip().lower()!="–¥–∞":
        await message.answer("–û—Ç–º–µ–Ω–∞.")
        await state.finish()
        return
    data = await state.getdata()
    cid = data["contestid"]
    # –æ—Ç–º–µ—Ç–∏–º confirmed
    partstable.update({"confirmed":True}, (Part.userid==message.fromuser.id)&(Part.contestid==cid))
    await message.answer("‚úÖ –í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /submit")
    await state.finish()

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ö–æ–º–∞–Ω–¥–∞ /submit –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
async def cmd_submit(message: types.Message):
    # –æ–∂–∏–¥–∞–µ–º: /submit <contest_id>
    try:
        cid = int(message.text.split()[1])
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /submit <id –∫–æ–Ω–∫—É—Ä—Å–∞>")
        return
    part = parts_table.get((Part.user_id==message.from_user.id)&(Part.contest_id==cid)&(Part.confirmed==True))
    if not part:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º Jam‚Äô–µ.")
        return
    # –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ä–æ–∫
    c = contests_table.get(doc_id=cid)
    now = datetime.utcnow()
    if now > datetime.fromisoformat(c["end"]):
        await message.answer("‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω ‚Äì –≤—ã –≤—ã–±—ã–ª–∏ –∏–∑ –∫–æ–Ω–∫—É—Ä—Å–∞.")
        return
    # –Ω–∞—á–∏–Ω–∞–µ–º FSM
    await ParticipationStates.R1.set()
    state = message._state.proxy()
    await state.update_data(contest_id=cid, renders=[])
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä (—Ñ–æ—Ç–æ).")

async def process_render1(photo: types.PhotoSize, state: FSMContext, message: types.Message):
    data = await state.get_data()
    renders = data["renders"]
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
    renders.append(photo[-1].file_id)
    await state.update_data(renders=renders)
    await ParticipationStates.next()
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Ä–µ–Ω–¥–µ—Ä.")

async def process_render2(photo: types.PhotoSize, state: FSMContext, message: types.Message):
    data = await state.get_data()
    renders = data["renders"] + [photo[-1].file_id]
    await state.update_data(renders=renders)
    await ParticipationStates.next()
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π —Ä–µ–Ω–¥–µ—Ä.")

async def process_render3(photo: types.PhotoSize, state: FSMContext, message: types.Message):
    data = await state.get_data()
    renders = data["renders"] + [photo[-1].file_id]
    await state.update_data(renders=renders)
    await ParticipationStates.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã (—Ç–µ–∫—Å—Ç).")

async def process_desc(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await ParticipationStates.next()
    await message.answer("–ò, –Ω–∞–∫–æ–Ω–µ—Ü, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª‚Äë–∏—Å—Ö–æ–¥–Ω–∏–∫.")

async def process_file(doc: types.Document, state: FSMContext, message: types.Message):
    data = await state.get_data()
    cid = data["contest_id"]
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º submission
    subs_table.insert({
        "user_id": message.from_user.id,
        "contest_id": cid,
        "renders": data["renders"],
        "description": data["description"],
        "file_id": doc.file_id,
        "timestamp": datetime.utcnow().isoformat(),
        "rating": 0
    })
    await message.answer("üéâ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    # —à–ª—ë–º –∞–¥–º–∏–Ω–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    for adm in ADMIN_IDS:
        try:
            await message.bot.send_message(adm,
                f"–ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}\n"
                f"–ö–æ–Ω–∫—É—Ä—Å: {cid}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
            )
        except:
            pass
    await state.finish()

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
async def set_timezone(message: types.Message, state: FSMContext):
    tz = message.text.strip()
    if tz not in pytz.all_timezones:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    users_table.update({"timezone":tz}, User.user_id==message.from_user.id)
    await message.answer(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}")
    await state.finish()

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def register_handlers(dp):
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_callback_query_handler(callback_main, lambda c: True, state="*")

    dp.register_message_handler(participation_confirm, state=ParticipationStates.Confirm)
    dp.register_message_handler(cmd_submit, commands=["submit"])

    dp.register_message_handler(process_render1, state=ParticipationStates.R1, content_types=types.ContentType.PHOTO)
    dp.register_message_handler(process_render2, state=ParticipationStates.R2, content_types=types.ContentType.PHOTO)
dp.register_message_handler(process_render3, state=ParticipationStates.R3, content_types=types.ContentType.PHOTO)
    dp.register_message_handler(process_desc, state=ParticipationStates.Desc, content_types=types.ContentType.TEXT)
    dp.register_message_handler(process_file, state=ParticipationStates.File, content_types=types.ContentType.DOCUMENT)

    dp.register_message_handler(set_timezone, state=SettingsStates.Timezone)
```

-------------------------------------------------------------------------------
5) handlers_admin.py  
```python
import logging
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
from db import contests_table, users_table, User, Contest
from config import ADMIN_IDS

class AdminStates(StatesGroup):
    Name        = State()
    Desc        = State()
    Tz          = State()
    Dates       = State()
    AdjustUser  = State()
    AdjustAmt   = State()

# /admin ‚Äì —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å
async def cmd_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
      InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å", callback_data="adm_new_contest"),
      InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Jam Coins", callback_data="adm_adjust_coins")
    )
    await message.answer("üîß –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# –ù–∞–∂–∞—Ç–∏–µ –≤ –∞–¥–º–∏–Ω‚Äë–º–µ–Ω—é
async def admin_callback(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_IDS:
        return
    data = call.data
    if data=="adm_new_contest":
        await AdminStates.Name.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞:")
    elif data=="adm_adjust_coins":
        await AdminStates.AdjustUser.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await call.answer()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ—à–∞–≥–æ–≤–æ
async def adm_new_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await AdminStates.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:")

async def adm_new_desc(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await AdminStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¢–ó (—É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏):")

async def adm_new_tz(message: types.Message, state: FSMContext):
    await state.update_data(tz=message.text)
    await AdminStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY‚ÄëMM‚ÄëDDTHH:MM, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º:\n"
                         "–Ω–∞–ø—Ä–∏–º–µ—Ä:\n2023-07-01T10:00 2023-07-10T20:00")

async def adm_new_dates(message: types.Message, state: FSMContext):
    parts = message.text.split()
    try:
        start = datetime.fromisoformat(parts[0])
        end   = datetime.fromisoformat(parts[1])
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    data = await state.get_data()
    contests_table.insert({
        "name": data["name"],
        "description": data["desc"],
        "tz": data["tz"],
        "start": start.isoformat(),
        "end":   end.isoformat()
    })
    # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è
    for u in users_table.all():
        if u["notify"]:
            try:
                await message.bot.send_message(
                  u["user_id"],
                  f"üì¢ –ù–æ–≤—ã–π Jam –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω:\n{data['name']}\n"
                  f"{start.isoformat()} ‚Äî {end.isoformat()}"
                )
            except:
                pass
    await message.answer("‚úÖ –ö–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω –∏ –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
    await state.finish()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Jam Coins
async def adm_adj_user(message: types.Message, state: FSMContext):
    try:
        uid = int(message.text)
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    if not users_table.search(User.user_id==uid):
await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(user_id=uid)
    await AdminStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è):")

async def adm_adj_amt(message: types.Message, state: FSMContext):
    data = await state.get_data()
    uid = data["user_id"]
    try:
        amt = int(message.text)
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.")
        return
    rec = users_table.get(User.user_id==uid)
    new = rec["jam_coins"] + amt
    users_table.update({"jam_coins": new}, User.user_id==uid)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {amt}. –¢–µ–∫—É—â–∏–π: {new}.")
    await state.finish()

def register_handlers(dp):
    dp.register_message_handler(cmd_admin, commands=["admin"])
    dp.register_callback_query_handler(admin_callback, lambda c: c.from_user.id in ADMIN_IDS)

    dp.register_message_handler(adm_new_name, state=AdminStates.Name)
    dp.register_message_handler(adm_new_desc, state=AdminStates.Desc)
    dp.register_message_handler(adm_new_tz,   state=AdminStates.Tz)
    dp.register_message_handler(adm_new_dates, state=AdminStates.Dates)

    dp.register_message_handler(adm_adj_user, state=AdminStates.AdjustUser)
    dp.register_message_handler(adm_adj_amt,  state=AdminStates.AdjustAmt)
```

-------------------------------------------------------------------------------
6) main.py  
```python
import logging
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import config
from handlers_user import register_handlers as reg_user
from handlers_admin import register_handlers as reg_admin

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
reg_user(dp)
reg_admin(dp)

async def on_startup(dp):
    # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º webhook
    await bot.set_webhook(config.WEBHOOK_URL)

async def on_shutdown(dp):
    # —É–¥–∞–ª—è–µ–º webhook
    await bot.delete_webhook()

if __name__ == "__main__":
    executor.start_webhook(
        dispatcher=dp,
        webhook_path = config.WEBHOOK_PATH,
        on_startup   = on_startup,
        on_shutdown  = on_shutdown,
        skip_updates = True,
        host         = config.WEBAPP_HOST,
        port         = config.WEBAPP_PORT,
    )
