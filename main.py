import asyncio
from fastapi import FastAPI
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import ParseMode
from aiogram import F

import aiosqlite
import os

TOKEN = '7204872281:AAG6lsstfppiibxNuFzwHprN9UWVrbdmJ5E'
ADMIN_IDS = [487202195]  # –í–∞—à Telegram ID

DB = 'jam.db'

app = FastAPI()
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def db_init():
    async with aiosqlite.connect(DB) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            tz TEXT,
            jam_coins INTEGER DEFAULT 0,
            notify INTEGER DEFAULT 1,
            contests TEXT DEFAULT '',
            avg_rating REAL DEFAULT 0
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS contests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            descr TEXT,
            terms TEXT,
            start TEXT,
            end TEXT,
            status TEXT
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS works (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contest_id INTEGER,
            user_id INTEGER,
            photos TEXT,
            description TEXT,
            source_id TEXT,
            submitted TEXT
        )""")
        await db.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user(user_id):
    async with aiosqlite.connect(DB) as db:
        async with db.execute('SELECT * FROM users WHERE user_id=?', (user_id,)) as c:
            user = await c.fetchone()
    return user

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def reg_user(user_id):
    if not await get_user(user_id):
        async with aiosqlite.connect(DB) as db:
            await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
            await db.commit()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_user(user_id, **kwargs):
    q = ','.join([f"{k}=?" for k in kwargs])
    v = list(kwargs.values()) + [user_id]
    async with aiosqlite.connect(DB) as db:
        await db.execute(f"UPDATE users SET {q} WHERE user_id=?", v)
        await db.commit()

# –•–µ–Ω–¥–ª–µ—Ä—ã Telegram-–±–æ—Ç–∞
@dp.message(CommandStart())
async def start(m: types.Message):
    await reg_user(m.from_user.id)
    kb = [
        [types.KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ JAM'–æ–≤")],
        [types.KeyboardButton(text="‚è≥ –ü—Ä–æ—Ö–æ–¥—è—â–∏–µ JAM'—ã")],
        [types.KeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")],
        [types.KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö")],
    ]
    if m.from_user.id in ADMIN_IDS:
        kb.append([types.KeyboardButton(text="üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
    await m.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ:', reply_markup=types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

# –ü–æ–¥–∫–ª—é—á–∞–µ–º FastAPI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Render
@app.get("/")
async def root():
    return {"message": "BlenderJam bot is running!"}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ FastAPI
if __name__ == '__main__':
    from aiogram import executor
    import uvicorn

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    db_init()

    # –ó–∞–ø—É—Å–∫ FastAPI —á–µ—Ä–µ–∑ Uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))

